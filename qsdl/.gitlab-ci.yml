image: docker:latest
services:
  - docker:dind

stages:
  - build
  - test
  - deploy

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
    - if: $CI_COMMIT_BRANCH == "main"

build-job:
  stage: build
  script:
    - docker build -t qsdl --target final .
    - mkdir images
    - docker save qsdl > images/qsdl.tar
  artifacts:
    paths:
      - images

test-job:
  stage: test
  allow_failure: true
  script:
    - docker build -t qsdl-test --target test .
    - docker run -v $(pwd)/dist:/app/dist qsdl-test
  artifacts:
    when: always
    paths:
      - dist

image-upload:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  variables:
    AWS_ECR_ACCESS_KEY_ID: $AWS_ECR_ACCESS_KEY_ID
    AWS_ECR_SECRET_ACCESS_KEY: $AWS_ECR_SECRET_ACCESS_KEY
    AWS_ECR_FULL_URI: $AWS_ECR_URI/$AWS_ECR_REPOSITORY_NAME
  before_script:
    - docker load -i images/qsdl.tar
  script:
    - docker tag qsdl:latest ${AWS_ECR_FULL_URI}:${CI_COMMIT_SHORT_SHA}
    - docker tag qsdl:latest ${AWS_ECR_FULL_URI}:latest
    - mkdir .aws
    - printf "[default]\nregion = eu-central-1\noutput = json" > $(pwd)/.aws/config
    - printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s" "$AWS_ECR_ACCESS_KEY_ID" "$AWS_ECR_SECRET_ACCESS_KEY" > $(pwd)/.aws/credentials
    - docker run --rm -v $(pwd)/.aws:/root/.aws amazon/aws-cli ecr get-login-password --region eu-central-1 | docker login -u AWS --password-stdin $AWS_ECR_FULL_URI
    - docker push --all-tags $AWS_ECR_FULL_URI
include:
  - template: Security/SAST-IaC.latest.gitlab-ci.yml
  - template: Secret-Detection.gitlab-ci.yml    