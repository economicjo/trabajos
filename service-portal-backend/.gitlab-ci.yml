image: docker:latest
services:
  - name: docker:dind
    command: ["--tls=false"]

variables:
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2

stages:
  - test
  - build
  - deploy

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"

Application tests:
  stage: test
  image: maven:3.8.5-eclipse-temurin-17
  needs: []
  dependencies: []
  script:
    - mvn test -B -ntp -Dcheckstyle.skip
  artifacts:
    when: always
    paths:
      - target/site/jacoco/jacoco.xml
      - target/jacoco.exec
      - target/surefire-reports/TEST-*.xml
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml

Checkstyle:
  stage: test
  image: maven:3.8.5-eclipse-temurin-17
  needs: []
  dependencies: []
  allow_failure: true
  script:
    - mvn checkstyle:checkstyle -B -ntp -Djacoco.skip
  artifacts:
    when: always
    paths:
      - target/checkstyle-result.xml
    expire_in: 10 minutes

SonarCloud static code analysis:
  stage: test
  image: maven:3.8.5-eclipse-temurin-17
  needs: ["Checkstyle", "Application tests"]
  dependencies: ["Checkstyle", "Application tests"]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  secrets:
    SONAR_TOKEN:
      vault: build/service-portal/backend/sonar-token@ci
      file: false
  cache:
    key: "${CI_PROJECT_NAME}-${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  before_script:
    - mvn versions:set -B -ntp -DnewVersion=$(date +%s)
  script:
    - mvn compile sonar:sonar -B -ntp -DskipTests -Dcheckstyle.skip -Djacoco.skip -Dsonar.qualitygate.wait=true -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

Publish test results:
  stage: test
  image: maven:3.8.5-eclipse-temurin-17
  needs: ["Checkstyle", "Application tests"]
  dependencies: ["Checkstyle", "Application tests"]
  script:
    - mvn surefire-report:report jacoco:report -B -ntp -DskipTests
    - mvn site -B -ntp -DgenerateReports=false
  artifacts:
    expose_as: "Test reports"
    name: test-reports
    paths:
      - target/site
    expire_in: 1 week

Test build image:
  stage: build
  needs: []
  dependencies: []
  rules:
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^feature\/.+/
  script:
    - docker build -t ${CI_PROJECT_NAME} --target final ./

Build and upload image:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  needs: ["SonarCloud static code analysis"]
  dependencies: []
  variables:
    AWS_ECR_FULL_URI: $AWS_ECR_URI/$AWS_ECR_BACKEND_REPOSITORY_NAME
  secrets:
    AWS_ACCESS_KEY_ID:
      vault: build/aws/dev-account/aws-access-key-id@ci
      file: false
    AWS_SECRET_ACCESS_KEY:
      vault: build/aws/dev-account/aws-secret-access-key@ci
      file: false
  script:
    - docker build -t ${CI_PROJECT_NAME} --target final ./
    - docker tag ${CI_PROJECT_NAME}:latest ${AWS_ECR_FULL_URI}:${CI_COMMIT_SHORT_SHA}
    - docker tag ${CI_PROJECT_NAME}:latest ${AWS_ECR_FULL_URI}:latest
    - docker run -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --rm amazon/aws-cli ecr get-login-password --region eu-central-1 | docker login -u AWS --password-stdin $AWS_ECR_FULL_URI
    - docker push --all-tags $AWS_ECR_FULL_URI

Deploy to DEV:
  stage: deploy
  image: $CI_REGISTRY/21.financeag/sw-development/infrastructure/cli-tools:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  dependencies: []
  needs: ["Build and upload image"]
  environment:
    name: dev
    deployment_tier: development
  secrets:
    AWS_ACCOUNT_ID:
      vault: deployment/targets/${CI_ENVIRONMENT_SLUG}/${CI_PROJECT_NAME}/aws-cluster-account-id@ci
      file: false
    AWS_ACCOUNT_ROLE_NAME:
      vault: deployment/targets/${CI_ENVIRONMENT_SLUG}/${CI_PROJECT_NAME}/aws-cluster-account-role-name@ci
      file: false
    KUBERNETES_CLUSTER_NAME:
      vault: deployment/targets/${CI_ENVIRONMENT_SLUG}/${CI_PROJECT_NAME}/cluster-name@ci
      file: false
    BACKEND_DB_SERVER:
      vault: deployment/targets/${CI_ENVIRONMENT_SLUG}/${CI_PROJECT_NAME}/db-host@ci
      file: false
    BACKEND_DB_NAME:
      vault: deployment/targets/${CI_ENVIRONMENT_SLUG}/${CI_PROJECT_NAME}/db-name@ci
      file: false
    BACKEND_DB_USERNAME:
      vault: deployment/targets/${CI_ENVIRONMENT_SLUG}/${CI_PROJECT_NAME}/db-username@ci
      file: false
    BACKEND_DB_PASSWORD:
      vault: deployment/targets/${CI_ENVIRONMENT_SLUG}/${CI_PROJECT_NAME}/db-password@ci
      file: false
  variables:
    INGRESS_ANNOTATIONS_GROUP_NAME: 21f-maas-service-portal-public-lb
    BACKEND_IMAGE_TAG: latest
    ENVIRONMENT: ${CI_ENVIRONMENT_SLUG}
  before_script:
    - mkdir /root/.aws
    - echo ${AWS_CONFIG} | base64 -d > /root/.aws/config
    - echo ${AWS_CREDENTIALS} | base64 -d > /root/.aws/credentials
  script:
    - ${CI_PROJECT_DIR}/deployment/scripts/deploy-application.sh -n ${CI_PROJECT_NAME} -c ${CI_PROJECT_DIR}/deployment/backend -f ${CI_PROJECT_DIR}/deployment/backend/values-ci.yaml -o ${CI_PROJECT_DIR}/deployment/values.yaml
    - kubectl rollout restart -n ${ENVIRONMENT} deployment ${CI_PROJECT_NAME}-deployment
include:
  - template: Security/SAST-IaC.latest.gitlab-ci.yml
  - template: Secret-Detection.gitlab-ci.yml
  
